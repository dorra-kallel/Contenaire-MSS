// <auto-generated />
using System;
using Contenaire.Web.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Contenaire.Web.Migrations
{
    [DbContext(typeof(ConcentrateurContext))]
    [Migration("20230711094051_lowla")]
    partial class lowla
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK_dbo.AspNetUserRoles");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Contenaire.Web.Models.AccessView", b =>
                {
                    b.Property<string>("IdAccessView")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DescriptionAccessView")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdAccessView")
                        .HasName("PK_AccessTable");

                    b.ToTable("AccessView", (string)null);
                });

            modelBuilder.Entity("Contenaire.Web.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AspNetRoles");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Contenaire.Web.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdOrganization")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("IsFirstConnection")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastConnection")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AspNetUsers");

                    b.HasIndex("IdOrganization");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Contenaire.Web.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AspNetUserClaims");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Contenaire.Web.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("LoginProvider", "ProviderKey", "UserId")
                        .HasName("PK_dbo.AspNetUserLogins");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Contenaire.Web.Models.BinLocaux", b =>
                {
                    b.Property<int>("IdBinLocaux")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBinLocaux"));

                    b.Property<string>("BinEnd")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BinStart")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CardLengthMax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CardLengthMin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CardLengthType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CodeLongue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GcodePin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GCodePin");

                    b.Property<string>("PinFlag")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PlafondCarte")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrefixCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ServiceCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdBinLocaux");

                    b.ToTable("BinLocaux", (string)null);
                });

            modelBuilder.Entity("Contenaire.Web.Models.EmvAid", b =>
                {
                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RidAid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PixAid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Indicateur")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LongeurPix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NiveauPriorite")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NumVersionAppTpe")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Version", "RidAid", "PixAid")
                        .HasName("PK__EmvAid__98EA3A08A71DA42B");

                    b.ToTable("EmvAid", (string)null);
                });

            modelBuilder.Entity("Contenaire.Web.Models.EmvDdol", b =>
                {
                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RidEmv")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PixEmv")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DefaultDdol")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("LongeurDdol")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LongeurPix")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Version", "RidEmv", "PixEmv");

                    b.ToTable("EmvDdol", (string)null);
                });

            modelBuilder.Entity("Contenaire.Web.Models.EmvKey", b =>
                {
                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RidEmv")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IndexCle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExpCle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LongeurExpCle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LongeurNca")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ModuloCle")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Version", "RidEmv", "IndexCle");

                    b.ToTable("EmvKeys");
                });

            modelBuilder.Entity("Contenaire.Web.Models.EmvRandCall", b =>
                {
                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RidEmv")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PixEmv")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CodeMonnaie")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LongeurPix")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NbrMaxTrans")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NbrTransInfPlafond")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SeuilAppelEmv")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Version", "RidEmv", "PixEmv");

                    b.ToTable("EmvRandCall", (string)null);
                });

            modelBuilder.Entity("Contenaire.Web.Models.EmvTac", b =>
                {
                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RidEmv")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PixEmv")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LongeurPid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TacRejetApresRejet")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("TacRejetTrans")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TacTraitOnline")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Version", "RidEmv", "PixEmv");

                    b.ToTable("EmvTac", (string)null);
                });

            modelBuilder.Entity("Contenaire.Web.Models.EmvTcc", b =>
                {
                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RidEmv")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PixEmv")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LongeurPix")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TccAutorise")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Version", "RidEmv", "PixEmv");

                    b.ToTable("EmvTcc", (string)null);
                });

            modelBuilder.Entity("Contenaire.Web.Models.EmvTdol", b =>
                {
                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RidEmv")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DefaultTdol")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("LongeurTdol")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Version", "RidEmv");

                    b.ToTable("EmvTdol", (string)null);
                });

            modelBuilder.Entity("Contenaire.Web.Models.Fuseau", b =>
                {
                    b.Property<string>("Countrycode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("countrycode");

                    b.Property<int?>("Diffhorraire")
                        .HasColumnType("int")
                        .HasColumnName("diffhorraire");

                    b.Property<string>("Nom")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nom");

                    b.HasKey("Countrycode");

                    b.ToTable("Fuseau", (string)null);
                });

            modelBuilder.Entity("Contenaire.Web.Models.GroupPrefix", b =>
                {
                    b.Property<string>("PrefixGroup")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdPrefixGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPrefixGroup"));

                    b.Property<string>("Institution")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrefixCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PrefixGroup");

                    b.ToTable("GroupPrefix", (string)null);
                });

            modelBuilder.Entity("Contenaire.Web.Models.Match", b =>
                {
                    b.Property<string>("MatchFieldName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MatchDescripion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MatchFieldName")
                        .HasName("PK_MatchTable");

                    b.ToTable("Match", (string)null);
                });

            modelBuilder.Entity("Contenaire.Web.Models.MigrationHistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContextKey")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<byte[]>("Model")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("MigrationId", "ContextKey")
                        .HasName("PK_dbo.__MigrationHistory");

                    b.ToTable("__MigrationHistory", (string)null);
                });

            modelBuilder.Entity("Contenaire.Web.Models.Nprefix", b =>
                {
                    b.Property<int>("IdPrefix")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_PREFIX");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPrefix"));

                    b.Property<string>("BinEnd")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BIN_END");

                    b.Property<string>("BinStart")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BIN_START");

                    b.Property<string>("CardLengthMax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CARD_LENGTH_MAX");

                    b.Property<string>("CardLengthMin")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CARD_LENGTH_MIN");

                    b.Property<string>("CardLengthType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CARD_LENGTH_TYPE");

                    b.Property<string>("IndexIssuerBitmap")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("INDEX_ISSUER_BITMAP");

                    b.Property<string>("InstitutionLabel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("INSTITUTION_LABEL");

                    b.Property<string>("Limit")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LIMIT");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MESSAGE");

                    b.Property<string>("PinFlag")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PIN_FLAG");

                    b.Property<string>("PrefixGroupId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PREFIX_GROUP_ID");

                    b.Property<string>("PrefixIndex")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PREFIX_INDEX");

                    b.Property<string>("Reseau")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("RESEAU");

                    b.HasKey("IdPrefix");

                    b.ToTable("NPREFIX", (string)null);
                });

            modelBuilder.Entity("Contenaire.Web.Models.Organization", b =>
                {
                    b.Property<string>("IdOrganization")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("ConventionOrganization")
                        .HasColumnType("int");

                    b.Property<string>("IdBk")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LogoOrganization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOrganization")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdOrganization");

                    b.ToTable("Organization", (string)null);
                });

            modelBuilder.Entity("Contenaire.Web.Models.PosIdentification", b =>
                {
                    b.Property<string>("IdTerminal")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CountryCodeAlpha")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CountryCodeNum")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IdMerchant")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Mcc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Outlet")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Port")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdTerminal");

                    b.ToTable("PosIdentification", (string)null);
                });

            modelBuilder.Entity("Contenaire.Web.Models.PosParameter", b =>
                {
                    b.Property<string>("P1IdTerminal")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P1_IdTerminal");

                    b.Property<string>("P10MasqueReseauAcceptation")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P10_MasqueReseauAcceptation");

                    b.Property<string>("P11NumSerieTerminal")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P11_NumSerieTerminal");

                    b.Property<string>("P12NumRegistrCommerce")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P12_NumRegistrCommerce");

                    b.Property<string>("P13HeureFinJournee")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P13_HeureFinJournee");

                    b.Property<string>("P14AffichageTerminalEtTicket")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P14_AffichageTerminalEtTicket");

                    b.Property<string>("P15SeuilTransactionOffline")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P15_SeuilTransactionOffline");

                    b.Property<string>("P161NombreTransactionAvisMax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P16_1_NombreTransactionAvisMax");

                    b.Property<string>("P162CaptureDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P16_2_CaptureDate");

                    b.Property<string>("P17IndicateurPinPad")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P17_IndicateurPinPad");

                    b.Property<string>("P18SaisieManuelle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P18_SaisieManuelle");

                    b.Property<string>("P19IndicateurTimeOut")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P19_IndicateurTimeOut");

                    b.Property<string>("P20AnnulationTimeOutValidation")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P20_AnnulationTimeOutValidation");

                    b.Property<string>("P21AcceptationCartePuce")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P21_AcceptationCartePuce");

                    b.Property<string>("P22IndicateurImpression")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P22_IndicateurImpression");

                    b.Property<string>("P23IndicateurAnnulation")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P23_IndicateurAnnulation");

                    b.Property<string>("P24Forcage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P24_Forcage");

                    b.Property<string>("P25ChangementDomiciliation")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P25_ChangementDomiciliation");

                    b.Property<string>("P26SupportPreAutorisation")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P26_SupportPreAutorisation");

                    b.Property<string>("P27TypeAppel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P27_TypeAppel");

                    b.Property<string>("P28CommerceOffshore")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P28_CommerceOffshore");

                    b.Property<string>("P29IndicateurRefund")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P29_IndicateurRefund");

                    b.Property<string>("P2TypeTerminal")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P2_TypeTerminal");

                    b.Property<string>("P30IndicateurCashBack")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P30_IndicateurCashBack");

                    b.Property<string>("P31IndicateurTip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P31_IndicateurTIP");

                    b.Property<string>("P32IndicateurInstalment")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P32_IndicateurInstalment");

                    b.Property<string>("P33IndicataurOffline")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P33_IndicataurOffline");

                    b.Property<string>("P34TypeApplication")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P34_TypeApplication");

                    b.Property<string>("P35Reserve")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P35_Reserve");

                    b.Property<string>("P36NumAppelServeurAutorisation")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P36_NumAppelServeurAutorisation");

                    b.Property<string>("P37AdresseX25serveurAutorisation")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P37_AdresseX25ServeurAutorisation");

                    b.Property<string>("P38NumAppelServeurTelecollecte")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P38_NumAppelServeurTelecollecte");

                    b.Property<string>("P39AdresseX25serveurTelecollecte")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P39_AdresseX25ServeurTelecollecte");

                    b.Property<string>("P3TypeApplication")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P3_TypeApplication");

                    b.Property<string>("P40NumServeurApplication")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P40_NumServeurApplication");

                    b.Property<string>("P41AdresseX25serveurApplication")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P41_AdresseX25ServeurApplication");

                    b.Property<string>("P42SecoursNumAppelServeurAutorisation")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P42_Secours_NumAppelServeurAutorisation");

                    b.Property<string>("P43SecoursAdresseX25serveurAutorisation")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P43_Secours_AdresseX25ServeurAutorisation");

                    b.Property<string>("P44SecoursNumAppelServeurTelecollecte")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P44_Secours_NumAppelServeurTelecollecte");

                    b.Property<string>("P45SecoursAdresseX25serveurTelecollecte")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P45_Secours_AdresseX25ServeurTelecollecte");

                    b.Property<string>("P46SecoursNumServeurApplication")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P46_Secours_NumServeurApplication");

                    b.Property<string>("P47SecoursAdresseX25serveurApplication")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P47_Secours_AdresseX25ServeurApplication");

                    b.Property<string>("P48MonnaiAcceptationAlpha1Numerique")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P48_MonnaiAcceptationAlpha_1_Numerique");

                    b.Property<string>("P49MonnaiAcceptation1Alpha")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P49_MonnaiAcceptation_1_Alpha");

                    b.Property<string>("P4NomApplication")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P4_NomApplication");

                    b.Property<string>("P50MonnaiAcceptation1Exposant")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P50_MonnaiAcceptation_1_Exposant");

                    b.Property<string>("P51MontantMinimumMonnaie1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P51_MontantMinimum_Monnaie_1");

                    b.Property<string>("P52MonnaiAcceptationAlpha2Numerique")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P52_MonnaiAcceptationAlpha_2_Numerique");

                    b.Property<string>("P53MonnaiAcceptation2Alpha")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P53_MonnaiAcceptation_2_Alpha");

                    b.Property<string>("P54MonnaiAcceptation2Exposant")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P54_MonnaiAcceptation_2_Exposant");

                    b.Property<string>("P55MontantMinimumMonnaie2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P55_MontantMinimum_Monnaie_2");

                    b.Property<string>("P56MonnaiAcceptationAlpha3Numerique")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P56_MonnaiAcceptationAlpha_3_Numerique");

                    b.Property<string>("P57MonnaiAcceptation3Alpha")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P57_MonnaiAcceptation_3_Alpha");

                    b.Property<string>("P58MonnaiAcceptation3Exposant")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P58_MonnaiAcceptation_3_Exposant");

                    b.Property<string>("P59MontantMinimumMonnaie3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P59_MontantMinimum_Monnaie_3");

                    b.Property<string>("P5EnseignePointVente")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P5_EnseignePointVente");

                    b.Property<string>("P60MonnaiAcceptationAlpha4Numerique")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P60_MonnaiAcceptationAlpha_4_Numerique");

                    b.Property<string>("P61MonnaiAcceptation4Alpha")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P61_MonnaiAcceptation_4_Alpha");

                    b.Property<string>("P62MonnaiAcceptation4Exposant")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P62_MonnaiAcceptation_4_Exposant");

                    b.Property<string>("P63MontantMinimumMonnaie4")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P63_MontantMinimum_Monnaie_4");

                    b.Property<string>("P64MonnaiAcceptationAlpha5Numerique")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P64_MonnaiAcceptationAlpha_5_Numerique");

                    b.Property<string>("P65MonnaiAcceptation5Alpha")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P65_MonnaiAcceptation_5_Alpha");

                    b.Property<string>("P66MonnaiAcceptation5Exposant")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P66_MonnaiAcceptation_5_Exposant");

                    b.Property<string>("P67MontantMinimumMonnaie5")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P67_MontantMinimum_Monnaie_5");

                    b.Property<string>("P68MonnaiAcceptationAlpha6Numerique")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P68_MonnaiAcceptationAlpha_6_Numerique");

                    b.Property<string>("P69MonnaiAcceptation6Alpha")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P69_MonnaiAcceptation_6_Alpha");

                    b.Property<string>("P6Adresse")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P6_Adresse");

                    b.Property<string>("P70MonnaiAcceptation6Exposant")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P70_MonnaiAcceptation_6_Exposant");

                    b.Property<string>("P71MontantMinimumMonnaie6")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P71_MontantMinimum_Monnaie_6");

                    b.Property<string>("P72MonnaiReglement1Numerique")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P72_Monnai_Reglement_1_Numerique");

                    b.Property<string>("P73MonnaiReglement1Alpha")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P73_Monnai_Reglement_1_Alpha");

                    b.Property<string>("P74MonnaiReglement1Exposant")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P74_Monnai_Reglement_1_Exposant");

                    b.Property<string>("P75MonnaiReglement2Numerique")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P75_Monnai_Reglement_2_Numerique");

                    b.Property<string>("P76MonnaiReglement2Alpha")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P76_Monnai_Reglement_2_Alpha");

                    b.Property<string>("P77MonnaiReglement2Exposant")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P77_Monnai_Reglement_2_Exposant");

                    b.Property<string>("P78MonnaiReglement3Numerique")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P78_Monnai_Reglement_3_Numerique");

                    b.Property<string>("P79MonnaiReglement3Alpha")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P79_Monnai_Reglement_3_Alpha");

                    b.Property<string>("P7Mcc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P7_MCC");

                    b.Property<string>("P80MonnaiReglement3Exposant")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P80_Monnai_Reglement_3_Exposant");

                    b.Property<string>("P81MonnaiReglement4Numerique")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P81_Monnai_Reglement_4_Numerique");

                    b.Property<string>("P82MonnaiReglement4Alpha")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P82_Monnai_Reglement_4_Alpha");

                    b.Property<string>("P83MonnaiReglement4Exposant")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P83_Monnai_Reglement_4_Exposant");

                    b.Property<string>("P84MonnaiReglement5Numerique")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P84_Monnai_Reglement_5_Numerique");

                    b.Property<string>("P85MonnaiReglement5Alpha")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P85_Monnai_Reglement_5_Alpha");

                    b.Property<string>("P86MonnaiReglement5Exposant")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P86_Monnai_Reglement_5_Exposant");

                    b.Property<string>("P87Reserve")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P87_Reserve");

                    b.Property<string>("P88Langue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P88_Langue");

                    b.Property<string>("P89ValeurTimeOut")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P89_ValeurTimeOut");

                    b.Property<string>("P8Ville")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P8_Ville");

                    b.Property<string>("P90ValeurNombreEssaieMaximum")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P90_ValeurNombreEssaieMaximum");

                    b.Property<string>("P91ValeurIntervalleEntreLesConnexion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P91_ValeurIntervalleEntreLesConnexion");

                    b.Property<string>("P92IndicateurSaisie4Digit")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P92_IndicateurSaisie4Digit");

                    b.Property<string>("P93CodePaysTerminalnumeric")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P93_CodePaysTerminalnumeric");

                    b.Property<string>("P94CodePaysTerminalAplha")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P94_CodePaysTerminalAplha");

                    b.Property<string>("P95Reserve")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P95_Reserve");

                    b.Property<string>("P96Port")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P96_Port");

                    b.Property<string>("P9MotDePasse")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("P9_MotDePasse");

                    b.HasKey("P1IdTerminal");

                    b.ToTable("PosParameters");
                });

            modelBuilder.Entity("Contenaire.Web.Models.Prefix", b =>
                {
                    b.Property<int>("IdPrefix")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPrefix"));

                    b.Property<string>("BinEnd")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BinStart")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CardLengthMax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CardLengthMin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CardLengthType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CodeLongue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GcodePin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GCodePin");

                    b.Property<string>("LibelleInstitution")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Message1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Message2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PinFlag")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PlafondCarte")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PointVente")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrefixCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrefixGroup")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ServiceCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdPrefix")
                        .HasName("PK_Prefix_1");

                    b.ToTable("Prefix", (string)null);
                });

            modelBuilder.Entity("Contenaire.Web.Models.UserAccess", b =>
                {
                    b.Property<string>("IdUserAccess")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("IdAccessView")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("ValueUserAccess")
                        .HasColumnType("int");

                    b.HasKey("IdUserAccess");

                    b.HasIndex("IdAccessView");

                    b.ToTable("UserAccess", (string)null);
                });

            modelBuilder.Entity("Contenaire.Web.Models.UserLog", b =>
                {
                    b.Property<string>("IdLog")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FieldId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ListFieldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdLog");

                    b.ToTable("UserLogs");
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("Contenaire.Web.Models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId");

                    b.HasOne("Contenaire.Web.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserRoles_AspNetUsers");
                });

            modelBuilder.Entity("Contenaire.Web.Models.AspNetUser", b =>
                {
                    b.HasOne("Contenaire.Web.Models.Organization", "IdOrganizationNavigation")
                        .WithMany("AspNetUsers")
                        .HasForeignKey("IdOrganization")
                        .HasConstraintName("FK_AspNetUsers_Organization");

                    b.Navigation("IdOrganizationNavigation");
                });

            modelBuilder.Entity("Contenaire.Web.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("Contenaire.Web.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Contenaire.Web.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("Contenaire.Web.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Contenaire.Web.Models.UserAccess", b =>
                {
                    b.HasOne("Contenaire.Web.Models.AccessView", "IdAccessViewNavigation")
                        .WithMany("UserAccesses")
                        .HasForeignKey("IdAccessView")
                        .IsRequired()
                        .HasConstraintName("FK_UserAccess_AccessView");

                    b.Navigation("IdAccessViewNavigation");
                });

            modelBuilder.Entity("Contenaire.Web.Models.AccessView", b =>
                {
                    b.Navigation("UserAccesses");
                });

            modelBuilder.Entity("Contenaire.Web.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");
                });

            modelBuilder.Entity("Contenaire.Web.Models.Organization", b =>
                {
                    b.Navigation("AspNetUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
